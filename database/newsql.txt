-------------------CREATING CORE TABLES------------------------

------------COLLEGES--------------
DROP TABLE IF EXISTS colleges CASCADE;
CREATE TABLE IF NOT EXISTS colleges (
    college_id GENERATED ALWAYS AS IDENTITY,
    short_name VARCHAR(10) NOT NULL,
    college_name VARCHAR(100) NOT NULL,

    CONSTRAINT pk_colleges
       PRIMARY KEY (college_id)
);

-----------USERS-------------
DROP TABLE IF EXISTS users CASCADE;
CREATE TABLE IF NOT EXISTS users
(
    id_no character(13) COLLATE pg_catalog."default" NOT NULL,
    fname character varying(100) COLLATE pg_catalog."default" NOT NULL,
    mname character varying(100) COLLATE pg_catalog."default",
    lname character varying(100) COLLATE pg_catalog."default" NOT NULL,
    email character varying(254) COLLATE pg_catalog."default" NOT NULL,
    password text COLLATE pg_catalog."default" NOT NULL,

    CONSTRAINT pk_users_id_no PRIMARY KEY (id_no),
    CONSTRAINT uq_users_email UNIQUE (email)
);



----------------ROLES------------------
DROP TABLE IF EXISTS roles CASCADE;
CREATE TABLE IF NOT EXISTS roles (
    role_id SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    level INT NOT NULL,

    CONSTRAINT uq_roles_name UNIQUE (name) -- the name should be unique
);

-----------------------PROGRAMS---------------------
DROP TABLE IF EXISTS programs CASCADE;
CREATE TABLE IF NOT EXISTS programs (
    program_id SERIAL PRIMARY KEY,
    program_name VARCHAR NOT NULL,
    college_id INT,
    chair character(13),

    CONSTRAINT fk_programs_college_id_to_colleges_college_id
       FOREIGN KEY (college_id)
       REFERENCES colleges(college_id)
       ON UPDATE CASCADE,
    CONSTRAINT uq_programs_chair UNIQUE (chair)
);

---------------COURSES---------------------
DROP TABLE IF EXISTS courses CASCADE;
CREATE TABLE IF NOT EXISTS courses (
    course_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    course_code VARCHAR(50) NOT NULL,
    course_name VARCHAR(50) NOT NULL,
    college_id INTEGER,
    
    CONSTRAINT pk_courses_courseid PRIMARY KEY (course_id),
    CONSTRAINT fk_courses_collegeid_to_colleges
        FOREIGN KEY (college_id)
        REFERENCES public.colleges (college_id)
        ON UPDATE CASCADE
        ON DELETE SET NULL
);

------------------SYLLABI-----------------------
DROP TABLE IF EXISTS syllabi CASCADE;
CREATE TABLE IF NOT EXISTS syllabi (
    syllabus_id SERIAL NOT NULL,
    course_id INT NOT NULL,
    program_id INT NOT NULL,
    version VARCHAR(10),
    content JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(20),
    noted_by VARCHAR(13),
    approved_by VARCHAR(13),

    CONSTRAINT fk_syllabi_course_id_to_courses_course_id
       FOREIGN KEY (course_id)
       REFERENCES courses(course_id),
    CONSTRAINT fk_syllabi_program_id_to_programs_program_id
       FOREIGN KEY (program_id)
       REFERENCES programs(program_id),
	CONSTRAINT pk_syllabi_syllabus_id
	   PRIMARY KEY (syllabus_id)
);

---------------PERMISSIONS-------------------
DROP TABLE IF EXISTS permissions CASCADE;
CREATE TABLE IF NOT EXISTS permissions (
    permission_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    category VARCHAR(50) NOT NULL
);






--------------------------------RELATIONSHIP TABLES--------------------------

----------------USER_ROLES--------------------
DROP TABLE IF EXISTS user_roles CASCADE;
CREATE TABLE IF NOT EXISTS user_roles (
    id_no character(13) NOT NULL,
    role_id INT NOT NULL,
    college_id INT,

    CONSTRAINT fk_user_roles_id_no_to_users_id_no
       FOREIGN KEY (id_no) 
       REFERENCES users(id_no)
	   ON UPDATE CASCADE
	   ON DELETE CASCADE,
	   
    CONSTRAINT fk_user_roles_role_id_to_roles_role_id
       FOREIGN KEY (role_id) 
       REFERENCES roles(role_id)
	   ON UPDATE CASCADE
	   ON DELETE CASCADE,
	   
    CONSTRAINT fk_user_roles_college_id_to_colleges_college_id
       FOREIGN KEY (college_id) 
       REFERENCES colleges(college_id)
	   ON UPDATE CASCADE
	   ON DELETE SET NULL,
	   
    CONSTRAINT pk_user_roles_id_no_role_id
       PRIMARY KEY (id_no, role_id)
);

--------------------COLLEGE DEANS--------------------------
DROP TABLE IF EXISTS college_deans CASCADE;
CREATE TABLE IF NOT EXISTS college_deans (
	college_id INT NOT NULL,
	dean_id character(13) NOT NULL,
	
	CONSTRAINT pk_collegedeans
		PRIMARY KEY (college_id, dean_id),
	
	CONSTRAINT fk_collegedeans_collegeid_to_colleges
		FOREIGN KEY (college_id)
		REFERENCES colleges(college_id)
		ON UPDATE CASCADE
		ON DELETE CASCADE,
		
	CONSTRAINT fk_collegedeans_deanid_to_users
		FOREIGN KEY (dean_id)
		REFERENCES users(id_no)
		ON UPDATE CASCADE
		ON DELETE CASCADE,
		
	CONSTRAINT uq_collegedeans_collegeid
		UNIQUE (college_id),
		
	CONSTRAINT uq_collegedeans_deanid
		UNIQUE (dean_id)
);

--------------------PROGRAM CHAIRS--------------------------
DROP TABLE IF EXISTS program_chairs CASCADE;
CREATE TABLE IF NOT EXISTS program_chairs (
	program_id INT NOT NULL,
	chair_id character(13) NOT NULL,
	
	CONSTRAINT pk_programchairs
		PRIMARY KEY (program_id, chair_id),
	
	CONSTRAINT fk_programchairs_programid_to_programs
		FOREIGN KEY (program_id)
		REFERENCES programs(program_id)
		ON UPDATE CASCADE
		ON DELETE CASCADE,
		
	CONSTRAINT fk_programchairs_chairid_to_users
		FOREIGN KEY (chair_id)
		REFERENCES users(id_no)
		ON UPDATE CASCADE
		ON DELETE CASCADE,
		
	CONSTRAINT uq_programchairs_programid
		UNIQUE (program_id),
		
	CONSTRAINT uq_programchairs_chairid
		UNIQUE (chair_id)
);

-----------------ROLE PERMISSIONS---------------------
DROP TABLE IF EXISTS role_permissions CASCADE;
CREATE TABLE IF NOT EXISTS role_permissions (
    role_id INT NOT NULL,
    permission_id INT NOT NULL,
    
    CONSTRAINT fk_roleperms_permid_to_perms
        FOREIGN KEY (permission_id)
        REFERENCES permissions(permission_id)
        ON DELETE CASCADE
		ON UPDATE CASCADE,

    CONSTRAINT fk_roleperms_roleid_to_roles
        FOREIGN KEY (role_id)
        REFERENCES roles(role_id)
        ON DELETE CASCADE
		ON UPDATE CASCADE,

    CONSTRAINT pk_roleperms
        PRIMARY KEY (role_id, permission_id)
);


------------------------SYLLABUS EDITORS------------------------
DROP TABLE IF EXISTS syllabus_editors CASCADE;
CREATE TABLE IF NOT EXISTS syllabus_editors (
	id INT GENERATED BY DEFAULT AS IDENTITY,
    syllabus_id INT NOT NULL,
    editor_id CHAR(13) NOT NULL,
    role VARCHAR(20) DEFAULT 'editor' CHECK (
		role IN ('editor', 'author', 'reviewer')
	),
    assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	
	CONSTRAINT pk_syleditors
		PRIMARY KEY (id),
		
	CONSTRAINT uq_syleditor
		UNIQUE (syllabus_id, editor_id, role),
		
    CONSTRAINT fk_syleditors_sylid_to_syllabus
		FOREIGN KEY (syllabus_id)
		REFERENCES syllabi(syllabus_id)
		ON UPDATE CASCADE
		ON DELETE CASCADE,
		
	CONSTRAINT fk_syleditors_editorid_to_users
		FOREIGN KEY (editor_id)
		REFERENCES users(id_no)
		ON UPDATE CASCADE
		ON DELETE CASCADE
);

----------------ROLE GRANT PERMISSIONS--------------------
DROP TABLE IF EXISTS role_grant_permissions CASCADE;
CREATE TABLE IF NOT EXISTS role_grant_permissions (
    granter_role_id INT NOT NULL,
    grantee_role_id INT NOT NULL,
    permission_id INT NOT NULL,

    CONSTRAINT fk_rolegrantperm_granter_to_roles
        FOREIGN KEY (granter_role_id)
        REFERENCES roles(role_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,

    CONSTRAINT fk_rolegrantperm_grantee_to_roles
        FOREIGN KEY (grantee_role_id)
        REFERENCES roles(role_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,

    CONSTRAINT fk_rolegrantperm_permid_to_permissions
        FOREIGN KEY (permission_id)
        REFERENCES permissions(permission_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,

    CONSTRAINT pk_rolegrantperm
        PRIMARY KEY (granter_role_id, grantee_role_id, permission_id)
);



--------------COURSE ASSIGNMENTS---------------
DROP TABLE IF EXISTS course_assignments CASCADE;
CREATE TABLE IF NOT EXISTS course_assignments (
    assignment_id SERIAL NOT NULL,
    professor_id VARCHAR(13) NOT NULL,
    course_id INT NOT NULL,
    program_id INT NOT NULL,
    semester VARCHAR(10) CHECK (semester IN ('1st', '2nd', 'Summer')),
    year INT,

    CONSTRAINT fk_courseassigns_profid_to_users
       FOREIGN KEY (professor_id)
       REFERENCES users(id_no)
	   ON UPDATE CASCADE
	   ON DELETE CASCADE,
	   
    CONSTRAINT fk_courseassigns_courseid_to_courses
       FOREIGN KEY (course_id)
       REFERENCES courses(course_id)
	   ON UPDATE CASCADE
	   ON DELETE CASCADE,
	   
    CONSTRAINT fk_courseassigns_programid_to_programs
       FOREIGN KEY (program_id)
       REFERENCES programs(program_id)
	   ON UPDATE CASCADE
	   ON DELETE CASCADE,
	   
    CONSTRAINT pk_courseassigns
       PRIMARY KEY (assignment_id),
	   
	CONSTRAINT uq_course_assignment
		UNIQUE (professor_id, course_id, program_id, semester, year)
);
    





--------------------inserting values/entries----------------------------------
INSERT INTO public.roles (role_id, name, level)
VALUES  (1,	'Admin',		1),
	(2,	'VPAA',		2),
	(3,	'VPAA Secretary',		3),
	(4,	'Dean',			4),
	(5,	'College Secretary',	5),
	(6,	'Chair',		6),
	(7,	'Professor',		7);

INSERT INTO public.users (id_no, fname, mname, lname, email, password)
VALUES  ('2025-01-10001',	'Sean',		'A',	'Adleman',	'superadmin@lpunetwork.edu.ph',	'$argon2id$v=19$m=65536,t=4,p=1$S1VtWW1VbTEvRlpqcUdtbg$a083dLbRaiZweFREvmKp9kOK5Ty17h81Gu1fybx3JQI'),
	('2025-01-20001',	'Anastasia',	'B',	'Adleman',	'admin@lpunetwork.edu.ph',	'$argon2id$v=19$m=65536,t=4,p=1$ZmdYcFlHQ1prL3h6dUp0ZA$3XUqgQC+RDMQknkyUXoZvG94EEU5SW3LOVNOsx0xr5k'),
	('2025-01-30001',	'April',	'C',	'Mercado',	'vsecretary@lpunetwork.edu.ph',	'$argon2id$v=19$m=65536,t=4,p=1$djdEdmd1Mk5sSmRxcEdCag$wwT/D8naT2I6a08Vug2MQaRWqvNxtN4YGm9YdtSoNWk'),
	('2025-01-40001',	'Christian',	 NULL,	'Dela Torre',	'dean@lpunetwork.edu.ph',	'$argon2id$v=19$m=65536,t=4,p=1$d29BS3NweXVsQklBMVVVcg$WyD7cJKEi7qG3hsyVLr6Pqk+ul/yPOu+aMfQaCov7vo'),
	('2025-01-50001',	'Prince',	'E',	'Caparaz',	'chair@lpunetwork.edu.ph',	'$argon2id$v=19$m=65536,t=4,p=1$VnNhYUJsZjdPUnNiOEFHQQ$2AN2hCPuGn8f3Rbk8r69NnrV86bZWWiCTE9yL5nfIQE'),
	('2025-01-60001',	'Cyril',	'F',	'Pastor',	'professor@lpunetwork.edu.ph',	'$argon2id$v=19$m=65536,t=4,p=1$ZExJUkRkOGFSbzI1UXJCdA$jOFDjUjCe6fgx6JnPg9xsC9kgTcVG0GqcnWboNgJzz');

INSERT INTO public.colleges (short_name, name, dean)
VALUES  ('CCS', 	'College of Information Technology and Computer Science', 	'2025-01-40001'),
	('CEA', 	'College of Engineering and Architecture', 			NULL),
	('CLAE', 	'College of Liberal Arts and Education', 				NULL);

INSERT INTO public.programs (program_name, college_id, chair)
VALUES  ('Information Technology', 	1, 	'2025-01-40001'),
	('Computer Science', 	1, 			NULL),
	('Mechanical Engineering', 	2, 				NULL),
	('Civil Engineering', 	2, 			NULL),
	('Psychology', 	3, 			NULL),
	('Secondary Education', 	3, 			NULL);

INSERT INTO public.courses (course_code, course_name, college_id)
VALUES ('LVTN01G', 'Living in the IT Era', 1),
	('CCSN01C', 'Intro to Computing', 1),
	('BSIT01C', 'Game Development', 1),
	('BSCS01C', 'Artificial Intelligence', 1),
	('MATS01G', 'General Mathematics', 2),
	('CEAN01E', 'Math for Engineers', 2),
	('BSME01E', 'Kinematics', 2),
	('BSCE01E', 'Rigid Bodies', 2),
	('UTSN01G', 'Understanding the Self', 3),
	('CLAE01A', 'General Education', 3),
	('BSPS01A', 'Introduction to Psychology', 3),
	('BSGE01A', 'Secondary Education', 3);

INSERT INTO public.permissions (permission_id,name, category)
VALUES  (11,	'AccountCreation', 			'Accounts'),
	(12,	'AccountViewing', 			'Accounts'),
	(13,	'AccountModification', 			'Accounts'),
	(14,	'AccountDeletion', 			'Accounts'),
	(21,	'RoleCreation', 			'Roles'),
	(22,	'RoleViewing', 				'Roles'),
	(23,	'RoleModification', 			'Roles'),
	(24,	'RoleDeletion', 			'Roles'),
	(25,	'RoleAllocation', 			'Roles'),
	(31,	'CollegeCreation', 			'Colleges'),
	(32,	'CollegeViewing', 			'Colleges'),
	(33,	'CollegeModification', 			'Colleges'),
	(34,	'CollegeDeletion', 			'Colleges'),
	(41,	'ProgramCreation', 			'Programs'),
	(42,	'ProgramViewing', 			'Programs'),
	(43,	'ProgramModification', 			'Programs'),
	(44,	'ProgramDeletion', 			'Programs'),
	(51,	'CourseCreation', 			'Courses'),
	(52,	'CourseViewing', 			'Courses'),
	(53,	'CourseModification', 			'Courses'),
	(54,	'CourseDeletion', 			'Courses'),
	(62,	'FacultyViewing', 			'Faculty'),
	(63,	'FacultyModification', 			'Faculty'),
	(71,	'SyllabusTemplateCreation', 		'Templates'),
	(72,	'SyllabusTemplateViewing', 		'Templates'),
	(73,	'SyllabusTemplateModification', 	'Templates'),
	(74,	'SyllabusTemplateDeletion', 		'Templates'),
	(81,	'SyllabusCreation', 			'Syllabus'),
	(82,	'SyllabusViewing', 			'Syllabus'),
	(83,	'SyllabusModification', 		'Syllabus'),
	(84,	'SyllabusDeletion', 			'Syllabus'),
	(85,	'SyllabusAllocation', 			'Syllabus');

INSERT INTO public.user_roles (id_no, role_id, college_id)
VALUES  ('2025-01-10001',	1,	NULL),
	('2025-01-20001',	2,	NULL),
	('2025-01-30001',	3,	NULL),
	('2025-01-40001',	4,	2),
	('2025-01-50001',	5,	1),
	('2025-01-60001',	6,	1);

INSERT INTO public.role_permissions (role_id, permission_id)
VALUES  (1, 11),
	(1, 12),
	(1, 13),
	(1, 14),
	(1, 21),
	(1, 22),
	(1, 23),
	(1, 24),
	(2, 11),
	(2, 12),
	(2, 13),
	(2, 14),
	(2, 21),
	(2, 22),
	(2, 23),
	(2, 24),
	(2, 31),
	(2, 32),
	(2, 33),
	(2, 34),
	(2, 41),
	(2, 42),
	(2, 43),
	(2, 44),
	(2, 51),
	(2, 52),
	(2, 53),
	(2, 54),
	(2, 71),
	(2, 72),
	(2, 73),
	(2, 74),
	(2, 82),	
	(3, 11),
	(3, 12),
	(3, 13),
	(3, 14),
	(3, 21),
	(3, 22),
	(3, 23),
	(3, 24),
	(3, 31),
	(3, 32),
	(3, 33),
	(3, 34),
	(3, 41),
	(3, 42),
	(3, 43),
	(3, 44),
	(3, 51),
	(3, 52),
	(3, 53),
	(3, 54),
	(3, 71),
	(3, 72),
	(3, 73),
	(3, 74),
	(3, 82),
	(4, 41),
	(4, 42),
	(4, 43),
	(4, 44),
	(4, 51),
	(4, 52),
	(4, 53),
	(4, 54),
	(4, 62),
	(4, 63),
	(4, 71),
	(4, 72),
	(4, 73),
	(4, 74),
	(4, 81),
	(4, 82),
	(4, 83),
	(4, 84),
	(5, 41),
	(5, 42),
	(5, 43),
	(5, 44),
	(5, 51),
	(5, 52),
	(5, 53),
	(5, 54),
	(5, 62),
	(5, 63),
	(5, 71),
	(5, 72),
	(5, 73),
	(5, 74),
	(5, 81),
	(5, 82),
	(5, 83),
	(5, 84),
	(6, 51),
	(6, 52),
	(6, 53),
	(6, 54),
	(6, 62),
	(6, 63),
	(6, 71),
	(6, 72),
	(6, 73),
	(6, 74),
	(6, 81),
	(6, 82),
	(6, 83),
	(6, 84),
	(6, 85),
	(7, 81),
	(7, 82),
	(7, 83),
	(7, 84);
